import paramiko
import os

def run(target, port, username, password):
	result = {
		"success": False,
		"banner": None,
		"hostname": None,
		"writable": False,
		"uploaded_file": None,
		"error": None,
		"remote_ls": []
	}

	try:
		# Connect
		ssh = paramiko.SSHClient()
		ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
		ssh.connect(target, port=port, username=username, password=password, timeout=10)
		result["success"] = True

		# Run a basic command
		stdin, stdout, stderr = ssh.exec_command("uname -a")
		result["banner"] = stdout.read().decode().strip()

		# Optional: get hostname
		stdin, stdout, stderr = ssh.exec_command("hostname")
		result["hostname"] = stdout.read().decode().strip()

		# Try SFTP to upload a test file
		sftp = ssh.open_sftp()
		remote_test_path = "/tmp/ssh_test_file.txt"  # Using /tmp for safety

		with open("ssh_test_file.txt", "w") as f:
			f.write("SSH exploit test file.")

		sftp.put("ssh_test_file.txt", remote_test_path)
		result["writable"] = True
		result["uploaded_file"] = remote_test_path

		# Try to list remote dir
		try:
			result["remote_ls"] = sftp.listdir("/tmp")
		except:
			result["remote_ls"] = []

		# Clean up
		try:
			sftp.remove(remote_test_path)
		except:
			pass

		sftp.close()
		ssh.close()

	except Exception as e:
		result["error"] = str(e)

	finally:
		if os.path.exists("ssh_test_file.txt"):
			os.remove("ssh_test_file.txt")

	return result
